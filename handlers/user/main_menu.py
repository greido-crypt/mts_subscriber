import random

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import Message, CallbackQuery

from data.keyboard import generate_start_kb, cancel_input_cd, generate_help_kb, generate_personal_area_kb, help_kb_text
from db.repository import users_repository, keys_repository
from settings import STICKER_ID

keyboard_router = Router()


@keyboard_router.message(Command('start'), any_state)
async def echo_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer_sticker(random.choice(STICKER_ID))
    await message.answer(
        '<b>ü¶î <u>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è <i>MTS-PREMIUM!</i></u>ü¶î üöÄ\n'
        '–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –≤—ã–ø–∞–≤—à–µ–π —Å–Ω–∏–∑—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –Ω–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –≤–º–µ—Å—Ç–µ —Å–æ '
        '–º–Ω–æ–π! üòäüî¥</b>',
        reply_markup=generate_start_kb())


@keyboard_router.callback_query(F.data == 'back_to_personal_area')
@keyboard_router.message(F.text == '‚ÑπÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
async def personal_area(event: CallbackQuery | Message):
    tg_user_id = event.from_user.id
    all_user_keys = await keys_repository.get_coupons_by_user_id(user_id=tg_user_id)
    number_of_purchases = len(all_user_keys)
    user_data = await users_repository.get_user_by_tg_id(user_id=tg_user_id)
    registration_date = user_data.creation_date.strftime('%Y-%m-%d %H:%M:%S')

    message_text = f'<b>‚ù§Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{event.from_user.username}\n' \
                   f'üîë –í–∞—à Id: <code>{tg_user_id}</code>\n' \
                   f'üí∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {number_of_purchases}\n' \
                   f'üìã –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}</b>'

    if isinstance(event, CallbackQuery):
        await event.message.edit_text(message_text, reply_markup=generate_personal_area_kb())
    else:
        await event.answer(message_text, reply_markup=generate_personal_area_kb())


@keyboard_router.callback_query(F.data == cancel_input_cd)
async def cancel_callback_query(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(f'<b>üî¥ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>')
    await state.clear()


@keyboard_router.callback_query(F.data == 'help')
async def help_kb(call: CallbackQuery):
    await call.message.edit_text('<b>üî¥ –ú–µ–Ω—é –ø–æ–º–æ—â–∏:\n'
                                 '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–∞–≥–∞–∑–∏–Ω–∞</b>', reply_markup=generate_help_kb())


@keyboard_router.message(F.text == help_kb_text, any_state)
async def help_kb(message: Message):
    await message.answer('<b>üî¥ –ú–µ–Ω—é –ø–æ–º–æ—â–∏:\n'
                         '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–∞–≥–∞–∑–∏–Ω–∞</b>', reply_markup=generate_help_kb())


@keyboard_router.callback_query()
async def callback_query(call: CallbackQuery):
    await call.message.edit_text('<b>üî¥ –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å..</b>')


@keyboard_router.message()
async def echo(message: Message):
    await message.answer('<b>üî¥ –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å..</b>', reply_markup=generate_start_kb())

from typing import List

from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from api.mts import MtsAPI
from api.mts.models import MyTariff, Tariff
from db.models import Accounts
from settings import HELP_URL, COOKIES_HELP_URL, ALLOWED_SUBSCRIPTIONS

personal_area_kb_text = '‚ÑπÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'
help_kb_text = '–ü–æ–º–æ—â—å ‚ùì'


def generate_start_kb() -> ReplyKeyboardMarkup:
    start_kb = ReplyKeyboardBuilder()
    start_kb.row(KeyboardButton(text=personal_area_kb_text))
    start_kb.row(KeyboardButton(text=help_kb_text))
    return start_kb.as_markup(resize_keyboard=True)


def generate_help_kb() -> InlineKeyboardMarkup:
    help_kb = InlineKeyboardBuilder()
    help_kb.row(InlineKeyboardButton(text='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
                                     url=HELP_URL))
    return help_kb.as_markup()


def generate_personal_area_kb() -> InlineKeyboardMarkup:
    personal_area_kb = InlineKeyboardBuilder()
    personal_area_kb.row(
        InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π", callback_data="history_paginator:send_menu:1"))
    personal_area_kb.row(InlineKeyboardButton(text="üì± –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="account_paginator:send_menu:1"))
    return personal_area_kb.as_markup()


cancel_input_cd = 'cancel_input'


def generate_cancel_kb() -> InlineKeyboardMarkup:
    cancel_input_kb = InlineKeyboardBuilder()
    cancel_input_kb.row(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ ‚ùå',
                                             callback_data=cancel_input_cd))
    return cancel_input_kb.as_markup()


generate_new_keys_text = '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∫–ª—é—á–∏'
generate_new_keys_cd = 'generate_new_keys'
get_key_info_text = '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–ª—é—á—É'
get_key_info_cd = 'get_key_info'
get_user_info_text = '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
get_user_info_cd = 'get_user_info'


def generate_admin_kb() -> InlineKeyboardMarkup:
    admin_kb = InlineKeyboardBuilder()
    admin_kb.row(InlineKeyboardButton(text=generate_new_keys_text,
                                      callback_data=generate_new_keys_cd))
    admin_kb.row(InlineKeyboardButton(text=get_key_info_text,
                                      callback_data=get_key_info_cd))
    admin_kb.row(InlineKeyboardButton(text=get_user_info_text,
                                      callback_data=get_user_info_cd))
    return admin_kb.as_markup()


def generate_generate_new_keys_kb() -> tuple[str, InlineKeyboardMarkup]:
    new_keys_kb_text = '<b>üî¥ –ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π</b>'
    new_keys_kb = InlineKeyboardBuilder()
    for key_id in range(0, 3):
        new_keys_kb.row(InlineKeyboardButton(text=f'üîë –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á–∏ ‚Ññ{key_id}', callback_data=f'generate_keys:{key_id}'))
    return new_keys_kb_text, new_keys_kb.as_markup()


def generate_get_account_kb_by_id(account_id: int | str) -> InlineKeyboardMarkup:
    """
    _id: account id from Account class
    """
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='‚Ü™Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç—É',
                                      callback_data=f'get_account:{account_id}'))
    return keyboard.as_markup()


def generate_delete_account_kb(account_data: Accounts) -> tuple[str, InlineKeyboardMarkup]:
    kb_delete_to_acc = InlineKeyboardBuilder()
    kb_delete_to_acc_text = '<b>–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?</b>'
    kb_delete_to_acc.add(InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ',
                                              callback_data=f'accept_remove_acc:{account_data.id}'))
    kb_delete_to_acc.add(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ',
                                              callback_data=f'get_account:{account_data.id}'))
    return kb_delete_to_acc_text, kb_delete_to_acc.as_markup()


def generate_accept_delete_all_subscriptions(account_data: Accounts) -> tuple[str, InlineKeyboardMarkup]:
    kb_delete_all_subscriptions = InlineKeyboardBuilder()
    kb_delete_all_subscriptions_text = '<b>–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?</b>'
    kb_delete_all_subscriptions.add(InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ',
                                                         callback_data=f'accept_delete_all_subscriptions:{account_data.id}'))
    kb_delete_all_subscriptions.add(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ',
                                                         callback_data=f'get_account:{account_data.id}'))
    return kb_delete_all_subscriptions_text, kb_delete_all_subscriptions.as_markup()


def generate_back_to_account_kb(account_id: int | str) -> InlineKeyboardMarkup:
    kb_back_to_acc = InlineKeyboardBuilder()
    kb_back_to_acc.add(InlineKeyboardButton(text='‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç',
                                            callback_data=f"get_account:{account_id}"))
    return kb_back_to_acc.as_markup()


def generate_account_kb(account_data: Accounts,
                        my_tariff_data: List[MyTariff],
                        allowed_tariff_data: List[Tariff]
                        ) -> tuple[InlineKeyboardMarkup, str]:
    account_menu = InlineKeyboardBuilder()
    account_text = f'<b>üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{account_data.phone_number}</code></b>\n'

    if my_tariff_data:
        account_text += (f'<b>üí≥ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞: <i>{my_tariff_data[0].contentName}</i>\n'
                         f'üí∞ –¶–µ–Ω–∞: <i>{my_tariff_data[0].price}</i>\n'
                         f'‚≠ê –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫: <i>{"–î–∞" if my_tariff_data[0].isPremiumSubscriber else "–ù–µ—Ç"}</i>\n'
                         f'üìÖ –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏: <i>{my_tariff_data[0].subscriptionDate}</i></b>')

    if my_tariff_data and my_tariff_data[0].isPremiumSubscriber:
        account_menu.row(InlineKeyboardButton(text='üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data=f"disable_subscribe:{account_data.id}"))
    else:
        account_menu.row(InlineKeyboardButton(text='üü¢ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data=f"add_subscribe:{account_data.id}"))

    account_menu.row(InlineKeyboardButton(text='üç™ –í—ã–≥—Ä—É–∑–∏—Ç—å Cookies', callback_data=f"get_cookies:{account_data.id}"))

    account_menu.row(InlineKeyboardButton(text='‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è', callback_data=f"get_account:{account_data.id}"))

    account_menu.row(InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data=f'remove_acc:{account_data.id}'))

    account_menu.row(
        InlineKeyboardButton(text='‚Ü™Ô∏è –ù–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤', callback_data=f"account_paginator:send_menu:{1}"))

    return account_menu.as_markup(), account_text


def generate_export_cookies_menu(account_data: Accounts,
                                 mts_api: MtsAPI):
    export_menu = InlineKeyboardBuilder()
    export_cookies = mts_api.export_cookies(skip_ip_cookies=True)
    export_menu_text = (f'<b>üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{account_data.phone_number}</code>\n'
                        f'üç™ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ cookies:\n'
                        f'<a href="{COOKIES_HELP_URL}">–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è‚ÅâÔ∏è</a></b>\n')
    export_menu.row(InlineKeyboardButton(text='‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç',
                                         callback_data=f"get_account:{account_data.id}"))
    return export_menu, export_menu_text, export_cookies
